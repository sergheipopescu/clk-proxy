#!/bin/bash
# shellcheck disable=SC2016

set -a										# export all variables

cln=$(echo -en '\033[0m')
red=$(echo -en '\033[0;31m')
grn=$(echo -en '\033[32m')
cyn=$(echo -en '\033[36m')
bred=$(echo -en '\033[1;91m')

engxsite() {

	ln -s /etc/nginx/sites-available/"$fqdn" /etc/nginx/sites-enabled/"$fqdn" ; echo -e "${cyn}$fqdn${cln} nginx site ${grn}enabled${cln}\n";
}


vhost()	{

	< /etc/nginx/blocks/ngx.srvblock envsubst '$fqdn' |					# substitute current variable in read vhost
	tee /etc/nginx/sites-available/"$fqdn" > /dev/null					# write nginx config file
}

whost()	{

	< /etc/nginx/blocks/ngx.srwblock envsubst '$fqdn' |					# substitute current variable in read vhost
	tee --append /etc/nginx/sites-available/"$fqdn" > /dev/null				# write nginx config file
}

okay () {
	echo -e "\b\b[${grn} OK ${cln}]\n"								# print okay function
}

fail () {
	echo -e "\n ${bred}Certbot errored out${cln}\n"; rm -f /etc/nginx/sites-available/"$fqdn"; exit 1
}

spinny () {
	while :; do for c in / - \\ \|; do printf '%s\b' "$c"; sleep 0.1; done; done			# spinner
}

makespin () {
        eval "spinny & $1 &> /dev/null || fail ; { okay; kill $! && wait $!; } 2>/dev/null"
}

getcert () {

#	certbot certonly --nginx --non-interactive --agree-tos --quiet --test-cert -m postmaster@"$fqdn" -d "$fqdn""$veveve"
	echo -e "Certificate requested: $fqdn$veveve\n" | tee -a /home/noble/salt
}

confirm () {

	echo -e "${cyn}$fqdn${cln} SSL Certificate ${grn}installed${cln}\n"
}

veveve=""

IFS=","


###
## Script
###

echo

# cursor off
tput civis

if [[ "$*" == "" ]]; then											# if no arguments

	read -r -p "Enter domain name: " fqdn									# Ask for domain and read input

	echo

	if [[ "$fqdn" = *.*.* ]]; then										# if subdomain exists

#		vhost
		echo -en "Getting certificate for $fqdn ...................   "
		makespin "getcert" 
#		confirm
#		engxsite

	elif [[ "$fqdn" = *.* ]]; then										# if there is no subdomain

#		vhost
#		whost
		echo -en "Getting certificate for $fqdn ...................   "
		veveve=",www.${fqdn}"
		makespin "getcert"
#		confirm
#		engxsite

	else													# if the argument is not a domain

		clear												# clear screen

		echo -e "\n ${bred} Wrong domain format.${cln}  ${red} Try again. ${cln}"		# print error

		eval "$(basename "$0")" && exit									# restart script

	fi

else														# if arguments exist

	for fqdn in "$@"; do 											# for each argument

		if [[ "$fqdn" = *.*.* ]]; then 									# if the argument contains a subdomain

#			vhost
			echo -en "Getting certificate for $fqdn ...................   "
			makespin "getcert" 
#			confirm
#			engxsite

		elif [[ "$fqdn" = *.* ]]; then 									# if the argument has no subdomain

#			vhost
#			whost
			echo -en "Getting certificate for $fqdn ...................   "
			veveve=",www.${fqdn}"
			makespin "getcert"
#			confirm
#			engxsite

		else												# if the argument is not a domain

			clear										# clear screen

			echo -e "\n ${bred} Wrong domain format.${cln}  ${red} Try again. ${cln}" # print error

			eval "$(basename "$0")" && exit							# restart script

		fi

	done

fi

# Cursor on
tput cnorm

systemctl reload nginx